#version 150

struct Material {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 direction;
	float shininess;
}; 

struct Light {
	int type;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 direction;
	float linear, constant, quadratic;
};

//The fragment shader operates on each fragment in a given polygon and it has to output the final color
//The final color is a combination of the object color, the texture and the Phong reflectance model based on the draw mode
//The fragment shader receives the interpolated RGBA color, the UV texture coordinates, the normal and the current position sent from the vertex shader 

in vec4 fragmentColor;
in vec2 fragmentTextureCoordinates;
in vec3 fragmentNormal;
in vec3 fragmentPosition;

uniform sampler2D textureData;
uniform int drawMode;
uniform int lightingEnabled;
uniform int isALightSource;
uniform vec3 lightPosition;
uniform vec3 viewerPosition;
uniform Material material;
uniform Light light;

out vec4 finalColor;

void main() {	

	vec4 tempColor;
	if (isALightSource==0) {
		//The final color can be computed using different approaches
		switch (drawMode) {
			case 0:
				finalColor = fragmentColor;
				break;
			case 1:
				finalColor=texture(textureData,fragmentTextureCoordinates);
				break;
			default: 
				finalColor = fragmentColor*texture(textureData,fragmentTextureCoordinates);
		}			
		
		if (lightingEnabled==1) {			
				//Ambient component
			vec3 ambient=material.ambient*light.ambient;
		
				//Diffuse component
			vec3 norm = normalize(fragmentNormal);
			vec3 lightDir = normalize(lightPosition - fragmentPosition);  

			float diff = max(dot(norm, lightDir), 0.0);
			vec3 diffuse = light.diffuse* diff * material.diffuse;

				//Specular component
			vec3 viewDir = normalize(viewerPosition - fragmentPosition);
			vec3 reflectDir = reflect(-lightDir, norm);  
			float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
			vec3 specular = light.specular * spec * material.specular;  

			
			//lightDir = normalize(-light.direction);
		 	float distance = length(lightPosition - fragmentPosition);
			float attenuation = 1.0f / (light.constant + light.linear*distance + light.quadratic*(distance * distance));
			ambient *= attenuation;
			diffuse *= attenuation;
			specular *= attenuation;
			float power = 20.0f/distance;
			finalColor=vec4((ambient+diffuse+specular),1)*finalColor;

		}
	}else {
		if (lightingEnabled==1) {
			finalColor=vec4(light.specular,1.0f);
		}else {
			finalColor = vec4(0.0f,0.0f,0.0f,0.0f);
		}
	}

}

